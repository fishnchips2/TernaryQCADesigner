_____INSTALLATION_____

This project depends on the following:
PySDL2
NetworkX
Python3

To use it, source the most recent Python3 from https://www.python.org/downloads/ or your operating system's repositories.
Use the command:

python3 -m pip install --upgrade pip

to ensure pip3 is up to date.

Use the command:

pip3 install pysdl2 networkx

to install the dependencies.

You are now ready to run this project. To run it, double click the file TernaryQCA.py or navigate to this folder in you Command Line Interface and run:

python TernaryQCA.py

_____USER INTERFACE_____

This project uses tiles to represent the ternary Quantum-dot Cells used in Quantum-dot Cellular automata.
The tiles have 3 main visual properties:

Orientation
- The orientation of the 2 small dots inside the tile represents the directional polarisation of a tQCA cell. Use CTRL+Left Click to permanently set the polarisation of a cell.
If the cell has no dots, its polarisation is unknown.

Shape
- The shape of the cell represents whether its polarisation is fixed. A square cell has fixed polarisation, a round cell can be influenced by its neighbours.
Use CTRL+Left CLick to fix a cell, or Left Click to make it mutable.

Colour
- The colour of the cell represents its clock phase. The software has 4 clock phases represented by red, green, blue and purple.
The cell will reset when its colour matches the colour of the tile in the top right corner. Use left click to change the clock phase of a cell.

The Simulate button steps the entire screen through one clock phase. The colour of the next phase is shown next to the button. This can be changed by Left Click,
and will also change the default colour of a new cell.

Use Right Click on a cell to bring up a window showing more information about the cell. The window contains a graph of that cell's polarisation during the previous clock step.
Clock steps are iterated 100 times to allow large networks of cells of the same phase to settle into a stable state.